apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
// 使用safe-args
apply plugin: "androidx.navigation.safeargs"

// AspectJ
// 版本界限：As-3.0.1 + gradle4.4-all （需要配置r17的NDK环境）
// 或者：As-3.2.1 + gradle4.6-all （正常使用，无警告）
buildscript { // 编译时用Aspect专门的编译器，不再使用传统的javac
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.9'
        classpath 'org.aspectj:aspectjweaver:1.8.9'
    }
}

// 赋值与引用
def androidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def support = rootProject.ext.dependencies
def url = rootProject.ext.url
def isRelease = rootProject.ext.isRelease

//获取签名属性文件，通过属性对象获取文件中的信息
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion
    defaultConfig {
        applicationId appId.applicationId
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode 1
        versionName "1.0"
        // 开启分包（将apk分成多个dex）
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 设置分包配置
        //multiDexKeepFile file('multidex-config.txt')

        // 将svg图片生成指定维度的png图片
        // vectorDrawables.generatedDensities('xhdpi', 'xxhdpi')

        // 使用support-v7兼容（5.0版本以上）
        // vectorDrawables.useSupportLibrary = true

        // 只保留指定和默认资源
        // resConfigs('zh-rCN')
        // resConfigs "zh", "en"

        // 配置so库的cpu架构（真机：arm（英国arm的架构）  模拟器：x86（intel的架构））
        // x86 x86_64 mips mips64
        // ndk {
        // abiFilters("armeabi-v7a")
        // abiFilters('armeabi-v7a', 'armeabi')
        //}

        // 这个方法接收三个非空的参数，第一个：确定值的类型，第二个：指定key的名字，第三个：传值（必须是String）
        // 为什么需要定义这个？因为src代码中有可能需要用到跨模块交互，如果是组件化模块显然不行
        // 切记：不能在android根节点，只能在defaultConfig或buildTypes节点下
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))
    }

    // 源集 -- 设置源集的属性，更改源集的JAVA目录或者自由目录
    /*sourceSets {
        main {
            if (!isRelease) {
                // 如果是组件化模式，需要单独运行时
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java.srcDirs = ['src/main/java']
                res.srcDirs = ['src/main/res']
                resources.srcDirs = ['src/main/resources']
                aidl.srcDirs = ['src/main/aidl']
                assets.srcDirs = ['src/main/assets']
            } else {
                // 集成化模式，整个项目打包
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }*/

    // 配置签名，必须写在buildTypes之前
    signingConfigs {
        /*debug {
            storeFile file('磁盘中.android目录下的debug.keystore')
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }*/
        release {
            // 签名证书文件
            storeFile file(keystoreProperties['keyStoreFile'])
            // 签名文件类型
            // storeType ""
            // 签名证书文件的密码
            storePassword keystoreProperties['keyStorePassword']
            // 签名证书中秘钥别名
            keyAlias keystoreProperties['keyAlias']
            // 签名证书中秘钥密码
            keyPassword keystoreProperties['keyPassword']
            // 是否开启V1、V2打包
            v1SigningEnabled = true
            v2SigningEnabled = true
        }
    }
    buildTypes {
        debug {
            // signingConfig signingConfigs.debug
            // 将属性编译到 BuildConfig.java中
            buildConfigField("String", "debugUrl", "\"${url.debug}\"")
        }

        release {
            signingConfig signingConfigs.release
            buildConfigField("String", "releaseUrl", "\"${url.release}\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = "1.8"
        targetCompatibility = 1.8
    }

//    // AdbOptions 可以对 adb 操作选项添加配置
//    adbOptions {
//        // 配置操作超时时间，单位毫秒
//        timeOutInMs = 5 * 1000_0
//
//        // adb install 命令的选项配置
//        installOptions '-r', '-s'
//    }
//    // 对 dx 操作的配置，接受一个 DexOptions 类型的闭包，配置由 DexOptions 提供
//    dexOptions {
//        // 配置执行 dx 命令是为其分配的最大堆内存
//        javaMaxHeapSize "4g"
//        // 配置是否预执行 dex Libraries 工程，开启后会提高增量构建速度，不过会影响 clean 构建的速度，默认 true
//        preDexLibraries = false
//        // 配置是否开启 jumbo 模式，代码方法是超过 65535 需要强制开启才能构建成功
//        jumboMode true
//        // 配置 Gradle 运行 dx 命令时使用的线程数量
//        threadCount 8
//        // 配置multidex参数
//        additionalParameters = [
//                '--multi-dex', // 多dex分包
//                '--set-max-idx-number=50000', // 每个包内方法数上限
//                // '--main-dex-list=' + '/multidex-config.txt', // 打包到主classes.dex的文件列表
//                '--minimal-main-dex'
//        ]
//    }
//    // 执行 gradle lint 命令即可运行 lint 检查，默认生成的报告在 outputs/lint-results.html 中
//    lintOptions {
//        // 遇到 lint 检查错误会终止构建，一般设置为 false
//        abortOnError false
//        // 将警告当作错误来处理（老版本：warningAsErros）
//        warningsAsErrors false
//        // 检查新 API
//        check 'NewApi'
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Map的遍历，最简洁的写法
    support.each { k, v -> implementation v }
    // testImplementation 'junit:junit:4.12'
    // androidTestImplementation 'androidx.test:runner:1.3.0'
    // androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    // 标准写法
    // implementation group: 'androidx.appcompat', name: 'appcompat', version: '1.2.0'
    // 如下引用其实是简写
    // implementation 'androidx.appcompat:appcompat:1.2.0'
    // implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    // Android注解
    // implementation 'com.android.support:support-annotations:28.0.0'
    // lifecycle
    // implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    // 使用Navigation需要导入的库
    // implementation 'androidx.navigation:navigation-fragment:2.3.0'
    // implementation 'androidx.navigation:navigation-ui:2.3.0'
    // implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    //ktx
    implementation 'androidx.core:core-ktx:1.3.1'
    // 1.2.0-alpha05 1.1.0-rc01
    implementation 'androidx.recyclerview:recyclerview:1.2.0-alpha05'
    implementation 'com.google.android.material:material:1.3.0-alpha02'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-beta-2'
    implementation 'com.google.code.gson:gson:2.8.5'
    // 自定义的library
    implementation project(path: ':http')
    implementation project(path: ':utils_library')
    //implementation project(path: ':static_skin')
    implementation project(':static_skin')
    // Kotlin协程
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0-RC2'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01'

    implementation 'com.github.bumptech.glide:glide:3.7.0'

    // AspectJ
    implementation 'org.aspectj:aspectjrt:1.8.13'
}

// 版本界限：As-3.0.1 + gradle4.4-all （需要配置r17的NDK环境）
// 或者：As-3.2.1 + gradle4.6-all （正常使用，无警告）
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}